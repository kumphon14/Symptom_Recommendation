import streamlit as st
import pandas as pd
import requests
import os

import sys
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á project root
sys.path.append(str(Path(__file__).resolve().parents[1]))

from src.recommender import load_rules, recommend_symptoms
# ----------------------
# Config
# ----------------------
st.set_page_config(page_title="Symptom Recommendation Demo", page_icon="ü©∫")
st.title("ü©∫ Symptom Recommendation System")
st.write("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ + ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

# ----------------------
# Mode ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠ Local
# ----------------------
USE_API = os.getenv("USE_API", "false").lower() == "true"

if not USE_API:
    # ‡πÇ‡∏´‡∏•‡∏î recommender.py ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    from src.recommender import load_rules, recommend_symptoms
    rules = load_rules("data/processed/association_rules.csv")

# ----------------------
# Input fields
# ----------------------
age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (Age)", min_value=0, max_value=120, value=26)
gender = st.selectbox("‡πÄ‡∏û‡∏® (Gender)", ["male", "female"])
symptom = st.text_input("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Symptom)", "‡πÑ‡∏≠")
top_n = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Top-N)", 1, 10, 5)

# ----------------------
# Submit Button
# ----------------------
if st.button("üîç ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"):
    if USE_API:
        # ---- API MODE ----
        payload = {
            "age": age,
            "gender": gender,
            "symptom": symptom,
            "top_n": top_n
        }
        try:
            res = requests.post("http://127.0.0.1:8000/recommend_symptom", json=payload)
            if res.status_code == 200:
                recs = res.json().get("recommendations", [])
            else:
                st.error(f"‚ùå Error {res.status_code}: {res.text}")
                recs = []
        except Exception as e:
            st.error(f"üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ: {e}")
            recs = []
    else:
        # ---- STANDALONE MODE ----
        recs = recommend_symptoms(symptom, rules, top_n=top_n)

    # ----------------------
    # Show Results
    # ----------------------
    st.subheader("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
    if recs:
        df_recs = pd.DataFrame({
            "‡∏•‡∏≥‡∏î‡∏±‡∏ö": range(1, len(recs) + 1),
            "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥": recs
        })
        st.table(df_recs)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
